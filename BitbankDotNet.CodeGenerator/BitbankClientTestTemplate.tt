<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using Moq;
using Moq.Protected;
using System;
using System.Net;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Xunit;

namespace BitbankDotNet.Tests.PublicApis
{
    public class BitbankClient<#= MethodName #>Test
    {
        const string Json =
            "<#= Json #>";

        [Theory]
        [InlineData(CurrencyPair.BtcJpy, "btc_jpy")]
        [InlineData(CurrencyPair.LtcBtc, "ltc_btc")]
        [InlineData(CurrencyPair.XrpJpy, "xrp_jpy")]
        [InlineData(CurrencyPair.EthBtc, "eth_btc")]
        [InlineData(CurrencyPair.MonaJpy, "mona_jpy")]
        [InlineData(CurrencyPair.MonaBtc, "mona_btc")]
        [InlineData(CurrencyPair.BccJpy, "bcc_jpy")]
        [InlineData(CurrencyPair.BccBtc, "bcc_btc")]
        public void HTTPステータスが200かつSuccessが1_<#= ApiName1 #>を返す(CurrencyPair pair, string pairName)
        {
            var mockHttpHandler = new Mock<HttpMessageHandler>();
            mockHttpHandler.Protected()
                .Setup<Task<HttpResponseMessage>>("SendAsync", ItExpr.IsAny<HttpRequestMessage>(),
                    ItExpr.IsAny<CancellationToken>())
                .Callback<HttpRequestMessage, CancellationToken>((request, _) =>
                {
                    Assert.Equal(HttpMethod.Get, request.Method);
                    Assert.Equal($"https://public.bitbank.cc/{pairName}/<#= ApiName2 #>", request.RequestUri.AbsoluteUri);
                })
                .Returns(Task.FromResult(new HttpResponseMessage(HttpStatusCode.OK)
                {
                    Content = new StringContent(Json)
                }));
            
            using (var client = new HttpClient(mockHttpHandler.Object))
            {
                var bitbank = new BitbankClient(client);
                var <#= ApiName2 #> = bitbank.<#= MethodName #>(pair).GetAwaiter().GetResult();

                Assert.NotNull(<#= ApiName2 #>);
                Assert.Equal(76543210.12345678, <#= ApiName2 #>.Sell);
                Assert.Equal(76543210.12345678, <#= ApiName2 #>.Buy);
                Assert.Equal(76543210.12345678, <#= ApiName2 #>.High);
                Assert.Equal(76543210.12345678, <#= ApiName2 #>.Low);
                Assert.Equal(76543210.12345678, <#= ApiName2 #>.Last);
                Assert.Equal(76543210.12345678, <#= ApiName2 #>.Vol);
                Assert.Equal(new DateTime(2018, 1, 1, 1, 1, 1, 111), <#= ApiName2 #>.Timestamp);
            }
        }

        [Theory]
        [InlineData(HttpStatusCode.NotFound, 1)]
        [InlineData(HttpStatusCode.OK, 0)]
        public void HTTPステータスが404またはSuccessが0_BitbankApiExceptionをスローする(HttpStatusCode statusCode, int success)
        {
            var mockHttpHandler = new Mock<HttpMessageHandler>();
            mockHttpHandler.Protected()
                .Setup<Task<HttpResponseMessage>>("SendAsync", ItExpr.IsAny<HttpRequestMessage>(),
                    ItExpr.IsAny<CancellationToken>())
                .Returns(Task.FromResult(new HttpResponseMessage(statusCode)
                {
                    Content = new StringContent($"{{\"success\":{success},\"data\":{{\"code\":10000}}}}")
                }));

            using (var client = new HttpClient(mockHttpHandler.Object))
            {
                var bitbank = new BitbankClient(client);
                Assert.Throws<BitbankApiException>(() =>
                    bitbank.<#= MethodName #>(CurrencyPair.BtcJpy).GetAwaiter().GetResult());
            }
        }
    }
}