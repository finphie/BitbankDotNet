<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using BitbankDotNet.Entities;
using BitbankDotNet.Extensions;
using BitbankDotNet.Shared.Helpers;
using Moq;
using Moq.Protected;
using System.Net;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Xunit;

namespace BitbankDotNet.Tests.PublicApis
{
    public class BitbankClient<#= MethodName #>Test
    {
        const string Json =
            "<#= Json #>";

        [Theory]
<# foreach (var name in Enum.GetNames(typeof(CurrencyPair))) { #>
        [InlineData(CurrencyPair.<#= name #>)]
<# } #>
        public void HTTPステータスが200かつSuccessが1_<#= ApiName1 #>を返す(<#= ParameterString #>)
        {
            var mockHttpHandler = new Mock<HttpMessageHandler>();
            mockHttpHandler.Protected()
                .Setup<Task<HttpResponseMessage>>("SendAsync", ItExpr.IsAny<HttpRequestMessage>(),
                    ItExpr.IsAny<CancellationToken>())
                .Callback<HttpRequestMessage, CancellationToken>((request, _) =>
                {
                    Assert.Equal(HttpMethod.Get, request.Method);
                    Assert.Equal($"https://public.bitbank.cc/{pair.GetEnumMemberValue()}/<#= ApiName2 #>", request.RequestUri.AbsoluteUri);
                })
                .Returns(Task.FromResult(new HttpResponseMessage(HttpStatusCode.OK)
                {
                    Content = new StringContent(Json)
                }));
            
            using (var client = new HttpClient(mockHttpHandler.Object))
            {
                var bitbank = new BitbankClient(client);
                var <#= ApiName2 #> = bitbank.<#= MethodName #>(pair).GetAwaiter().GetResult();

                Assert.NotNull(<#= ApiName2 #>);
				
				var entity = new <#= ApiName1 #>();
				EntityHelper.SetValue(entity);
				Assert.Equal(entity, <#= ApiName2 #>, new PublicPropertyComparer<<#= ApiName1 #>>());
            }
        }

        [Theory]
        [InlineData(HttpStatusCode.NotFound, 1)]
        [InlineData(HttpStatusCode.OK, 0)]
        public void HTTPステータスが404またはSuccessが0_BitbankApiExceptionをスローする(HttpStatusCode statusCode, int success)
        {
            var mockHttpHandler = new Mock<HttpMessageHandler>();
            mockHttpHandler.Protected()
                .Setup<Task<HttpResponseMessage>>("SendAsync", ItExpr.IsAny<HttpRequestMessage>(),
                    ItExpr.IsAny<CancellationToken>())
                .Returns(Task.FromResult(new HttpResponseMessage(statusCode)
                {
                    Content = new StringContent($"{{\"success\":{success},\"data\":{{\"code\":10000}}}}")
                }));

            using (var client = new HttpClient(mockHttpHandler.Object))
            {
                var bitbank = new BitbankClient(client);
                Assert.Throws<BitbankApiException>(() =>
                    bitbank.<#= MethodName #>(CurrencyPair.BtcJpy).GetAwaiter().GetResult());
            }
        }
    }
}