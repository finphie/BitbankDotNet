<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#
    const int Min = 1;
    const int Max = 32;
#>
using BenchmarkDotNet.Attributes;
using BitbankDotNet.SharedLibrary.Extensions;
using BitbankDotNet.SharedLibrary.Helpers;
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace BitbankDotNet.Benchmarks.StringConcat
{
    [Config(typeof(BenchmarkConfig))]
    public class StringConcat2Benchmark
    {
<# for (var i = Min; i <= Max; i++) { #>
        string _source<#= i #>A, _source<#= i #>B;
        uint _length<#= i #>;
<# } #>

        [GlobalSetup]
        public void Setup()
        {
            string[] CreateUtf16Strings(int length) => StringHelper.CreateUtf16Strings(2, length);

<# for (var i = Min; i <= Max; i++) { #>
<#
    var sourceA = $"_source{i}A";
    var sourceB = $"_source{i}B";
#>
            (<#= sourceA #>, <#= sourceB #>) = CreateUtf16Strings(<#= i #>);
            _length<#= i #> = (uint)<#= sourceA #>.Length * 2;
<# } #>
        }

<# for (var i = Min; i <= Max; i++) { #>
<#
    var sourceA = $"_source{i}A";
    var sourceB = $"_source{i}B";
#>
        [Benchmark, BenchmarkCategory("<#= i #>")]
        public string UnsafeCopyBlockUnaligned<#= i #>A()
        {
            var result = new string(default, <#= i * 2 #>);
            ref var resultStart = ref Unsafe.As<char, byte>(ref MemoryMarshal.GetReference(result.AsSpan()));

            ref var sourceStart = ref Unsafe.As<char, byte>(ref MemoryMarshal.GetReference(<#= sourceA #>.AsSpan()));
            Unsafe.CopyBlockUnaligned(ref resultStart, ref sourceStart, <#= i * 2 #>);
 
            sourceStart = ref Unsafe.As<char, byte>(ref MemoryMarshal.GetReference(<#= sourceB #>.AsSpan()));
            Unsafe.CopyBlockUnaligned(ref Unsafe.Add(ref resultStart, <#= i * 2 #>), ref sourceStart, <#= i * 2 #>);

            return result;
        }

        [Benchmark, BenchmarkCategory("<#= i #>")]
        public string UnsafeCopyBlockUnaligned<#= i #>B()
        {
            var result = new string(default, <#= i * 2 #>);
            ref var resultStart = ref Unsafe.As<char, byte>(ref MemoryMarshal.GetReference(result.AsSpan()));

            ref var sourceStart = ref Unsafe.As<char, byte>(ref MemoryMarshal.GetReference(<#= sourceA #>.AsSpan()));
            Unsafe.CopyBlockUnaligned(ref resultStart, ref sourceStart, _length<#= i #>);
 
            sourceStart = ref Unsafe.As<char, byte>(ref MemoryMarshal.GetReference(<#= sourceB #>.AsSpan()));
            Unsafe.CopyBlockUnaligned(ref Unsafe.Add(ref resultStart, <#= i * 2 #>), ref sourceStart, _length<#= i #>);

            return result;
        }

        [Benchmark, BenchmarkCategory("<#= i #>")]
        public string CopyChar<#= i #>()
        {
            var result = new string(default, <#= i * 2 #>);
            ref var resultStart = ref MemoryMarshal.GetReference(result.AsSpan());

            ref var sourceStart = ref MemoryMarshal.GetReference(<#= sourceA #>.AsSpan());
            BinaryHelper.CopyChar<#= i #>(ref sourceStart, ref resultStart);

            sourceStart = ref MemoryMarshal.GetReference(<#= sourceB #>.AsSpan());
            BinaryHelper.CopyChar<#= i #>(ref sourceStart, ref Unsafe.Add(ref resultStart, <#= i #>));

            return result;
        }
<# if (i < Max) { Write(Environment.NewLine); } #>
<# } #>
    }
}